@model ProdigyScout.ViewModels.StudentViewModel

<div class="my-3 py-3">
    <h2><b>Your Prodigies and Prospective Hires</b></h2>
</div>

<div style="display: flex; padding: 0 35px; align-items: center; justify-content: center; height: 350px;">
    <div class="wrapper">
        <ul class="carouselx">
            @foreach (var item in Model.Students)
            {
                @if (item.ComplexDetails.IsWatched || item.ComplexDetails.IsPipeline)
                {
                    <li class="card">
                        <div class="imgdiv" style="display: flex; flex-direction: row; justify-content: center; align-items: center; gap: 25px;">
                            @if (!item.ComplexDetails.IsWatched) //UnWatched
                            {
                                <img src="./unstarred.png" alt="Mark as Watch" width="75" height="75" class="opacity-25" />
                            }
                            else //Watched
                            {
                                <img src="./goldstar.png" alt="Mark as Unwatch" width="75" height="75">
                            }
                            <div class="img">
                                <img src="./yeshandshake.png" alt="Profile Picture" draggable="false">
                            </div>
                            @if (!item.ComplexDetails.IsPipeline) //Non Pipeline
                            {
                                <img src="./nohandshake.png" alt="Mark as Watch" width="75" height="75" class="opacity-50" />
                            }
                            else //Pipeline
                            {
                                <img src="./yeshandshake.png" alt="Mark as Unwatch" width="75" height="75">
                            }
                        </div>
                        <h2>@Html.DisplayFor(modelItem => item.FirstName) @Html.DisplayFor(modelItem => item.LastName)</h2>
                        <span>Major</span>
                        <span>GPA: @Html.DisplayFor(modelItem => item.GPA)</span>
                    </li>
                }
            }
        </ul>
    </div>
</div>

<style>
    .wrapper {
        width: 100%;
        position: relative;
    }

        .wrapper i {
            top: 50%;
            height: 50px;
            width: 50px;
            cursor: pointer;
            font-size: 1.25rem;
            position: absolute;
            text-align: center;
            line-height: 50px;
            background: #fff;
            border-radius: 50%;
            box-shadow: 0 3px 6px rgba(0,0,0,0.23);
            transform: translateY(-50%);
            transition: transform 0.1s linear;
        }

            .wrapper i:active {
                transform: translateY(-50%) scale(0.85);
            }

        .wrapper .carouselx {
            display: grid;
            grid-auto-flow: column;
            grid-auto-columns: calc((100% / 3) - 12px);
            overflow-x: auto;
            scroll-snap-type: x mandatory;
            gap: 16px;
            border-radius: 8px;
            scroll-behavior: smooth;
            scrollbar-width: none;
        }

    .carouselx::-webkit-scrollbar {
        display: none;
    }

    .carouselx.no-transition {
        scroll-behavior: auto;
    }

    .carouselx.dragging {
        scroll-snap-type: none;
        scroll-behavior: auto;
    }

        .carouselx.dragging .card {
            cursor: grab;
            user-select: none;
        }

    .carouselx :where(.card, .img) {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .carouselx .card {
        scroll-snap-align: start;
        height: 300px;
        list-style: none;
        background: #fff;
        cursor: pointer;
        padding-bottom: 15px;
        flex-direction: column;
        border-radius: 8px;
        width: 100%;
    }

        .carouselx .card .img {
            background: #000000;
            height: 150px;
            width: 150px;
            border-radius: 50%;
        }

    .card .img img {
        width: 140px;
        height: 140px;
        border-radius: 50%;
        object-fit: cover;
        border: 4px solid #fff;
    }

    .carouselx .card h2 {
        font-weight: 500;
        font-size: 1.56rem;
        margin: 30px 0 5px;
    }

    .carouselx .card span {
        color: #6A6D78;
        font-size: 1.31rem;
    }
</style>
<script>
    const wrapper = document.querySelector(".wrapper");
    const carousel = document.querySelector(".carouselx");
    const firstCardWidth = carousel.querySelector(".card").offsetWidth;
    const carouselChildrens = [...carousel.children];
    let isDragging = false, isAutoPlay = true, startX, startScrollLeft, timeoutId;

    let cardPerView = Math.round(carousel.offsetWidth / firstCardWidth);

    carouselChildrens.slice(-cardPerView).reverse().forEach(card => {
        carousel.insertAdjacentHTML("afterbegin", card.outerHTML);
    });

    carouselChildrens.slice(0, cardPerView).forEach(card => {
        carousel.insertAdjacentHTML("beforeend", card.outerHTML);
    });

    carousel.classList.add("no-transition");
    carousel.scrollLeft = carousel.offsetWidth;
    carousel.classList.remove("no-transition");

    const dragStart = (e) => {
        isDragging = true;
        carousel.classList.add("dragging");

        startX = e.pageX;
        startScrollLeft = carousel.scrollLeft;
    }
    const dragging = (e) => {
        if (!isDragging) return;

        carousel.scrollLeft = startScrollLeft - (e.pageX - startX);
    }
    const dragStop = () => {
        isDragging = false;
        carousel.classList.remove("dragging");
    }
    const infiniteScroll = () => {
        if (carousel.scrollLeft === 0) {
            carousel.classList.add("no-transition");
            carousel.scrollLeft = carousel.scrollWidth - (2 * carousel.offsetWidth);
            carousel.classList.remove("no-transition");
        }
        else if (Math.ceil(carousel.scrollLeft) === carousel.scrollWidth - carousel.offsetWidth) {
            carousel.classList.add("no-transition");
            carousel.scrollLeft = carousel.offsetWidth;
            carousel.classList.remove("no-transition");
        }
        clearTimeout(timeoutId);
        if (!wrapper.matches(":hover")) autoPlay();
    }
    const autoPlay = () => {
        if (window.innerWidth < 800 || !isAutoPlay) return;
        timeoutId = setTimeout(() => carousel.scrollLeft += firstCardWidth, 2000);
    }
    autoPlay();
    carousel.addEventListener("mousedown", dragStart);
    carousel.addEventListener("mousemove", dragging);
    document.addEventListener("mouseup", dragStop);
    carousel.addEventListener("scroll", infiniteScroll);
    wrapper.addEventListener("mouseenter", () => clearTimeout(timeoutId));
    wrapper.addEventListener("mouseleave", autoPlay);
</script>